# Scalars
scalar JSON

# Boilerplate
type Info {
  id: ID!
  name: String!
  description: String
}

type Node {
  id: ID!
  label: String!
  payload: JSON
  graph: ID!
}

input NodeInput {
  id: ID!
  label: String!
  payload: JSON
  graph: ID!
}

type Edge {
  id: ID!
  from: ID!
  to: ID!
  payload: JSON
  relation: ID!
  graph: ID!
}

input EdgeInput {
  id: ID!
  from: ID!
  to: ID!
  payload: JSON
  relation: ID!
  graph: ID!
}

input GraphInput {
  id: ID!
  nodes: [NodeInput!]!
  edges: [EdgeInput!]!
}

type Graph {
  id: ID!
  nodes: [Node!]!
  edges: [Edge!]!
}

# Query Root
type Query {
  # Boilerplate
  info: Info
  graph: Graph
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node!]!
  edge(id: ID!): Edge
  edges(ids: [ID!]!): [Edge!]!
  nodeOutgoingConnections(node: ID!, relation: ID): Graph!
  nodeIncomingConnections(node: ID!, relation: ID): Graph!
  shortestPath(startNode: ID!, endNode: ID!): String
}

type Mutation {
  persistNode(node: [NodeInput!]): ID!
  persistNodes(nodes: [NodeInput!]!): [ID!]!
  persistEdge(edge: EdgeInput): ID!
  persistEdges(edges: [EdgeInput!]!): [ID!]!
  persistGraph(graph: GraphInput!): ID!
}
